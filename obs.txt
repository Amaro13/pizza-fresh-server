Basic tips for typescript

npm init -y
npm i -D typescript
npx tsc --init
//The one below creates the index.js as written on the ts
npx tsc
//Insert in package.json
"start": "node dist/index.js",
    "build": "npx tsc",
    "build-and-run": "npm run build && npm start"

the last one builds and runs the index.js

// Create the dist folder and update the tsconfig.json. Don't forget to make it not a coment genius.
"outDir": "./dist"


// Installing the NestJS
npm i -g @nestjs/cli

// Starting a new project
nest new (nestjs-intr) -> name of the project

// Use of the usual npm run, in the package.json you can see the start options, while working use nest start:dev to watch for changes in files

//in the controller you controll the routes access just insert in the @controller or @get

//in the service you provide the data or functions into the project

// first thing to do is create the .editorconfig  and fill it like so:
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true // optional because frankly this one can get on your nerves while coding since it inserts the final newline everytime you stop using the keyboard and sometimes you don't need to.

// change the listen port in the main to another besides 3000 so it doesn't start a conflict with other ports since most use 3000 already

// when changing a function from a module, change using F2, using it this way changes it's name from all modules so there is no conflict.

// first thing to create is the back end data, start by creating the folder and the file in the src folder (in this case is the table)

// Pay very close attention to this table, and how it's created, notice the usability, the ease and the direction in witch the data flows, much better than before, use it read the coments and understand all of it, in doubt ask your brother or freaking google, for fucks sake study more, sacrifice a saturday more often you lazy bum.

// after the creation of the module, controller and service for the table, create another folder inside called dto(Data Transfer Object) witch is a simple object used to transfer data from one place into another

// Now it's time to create a folder inside the src called entities, an entity is a representation of a conjunction of informations about a determined concept of the system. All entities have atributes, witch are the informations that reference the entity.

// Now install the validator and transformer with npm i class-validator class-transformer. With them installed you can now validate data that will be passed through the databank. Change the main and dt as required for it

// Now install the swagger with: npm i @nestjs/swagger swagger-ui-express

// Set the swagger properly in the main, app  controller, table controller and in the dto. Observe that the swagger can now be checked in the localhost while the back is running.

// install postgres and beekeeper, they are the databank storage programs that will be used in this project, when you install the postgres you will have to create the username and password, inform them in beekeeper and connect

// An ORM maps between an Object Model and a Relational Database. An ODM maps between an Object Model and a Document Database.
// ODM on the other hand is an Object Document Mapper, which maps objects with a Document Database like MongoDB.
//The main difference is that ORM is for MySQL databases, while ODM does the mapping for document representation of data. Best way to remember what ORM does would be to think of it as an excel spread sheet, with rows and columns. When using this set up, you want to be sure you have a great plan on how you want to tackle the current application, it does not allow as many modifications like ODM does. With ODM we can add new fields and properties easily but with ORM when adding a new field you need to keep in mind that nothing stays empty so it needs a value to be as default unless you want to go into each and modify.

// Prisma is an ORM just like Sequelize and Mongoose, wich is used to facilitator of comunication with a database in SQL.

// Now install prisma using npm i -D prisma

// Now give the prisma an init using npx prisma init and add the .env to the .gitignore file

// in the schema.prisma you can change the provider depending on what database program you are using: postgres, mongoose, mongoDB, sequelize, etc. In this case we are using the postgres.

// Change the .env to fit the username, password and database you created in postgres. : DATABASE_URL="postgresql://username:password@localhost:5432/database"

// Create the DB model in the schema.prisma, Example:
generator client { //is created automatically
  provider = "prisma-client-js"
}

datasource db { // change the provider depending on what you are using, the example uses the postgresql
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table{ // creates the table Table in the db
  id String @id @default(uuid())
  number Int @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("table")
}

model User { // creates the table User in the db
  id       String @id @default(uuid())
  nickname String @unique
  name     String
  password String
  image    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Product { // creates the table Product in the db
  id          String @id @default(uuid())
  name        String @unique
  description String
  price       Float
  image       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product")
}

// Now run npx prisma db push to create the db schema in the database, this creates a new database or substitutes existing one, remember to always push the prisma db everytime you update the schema.prisma, if you wish to just alter or add new thins use the migrate function

The decorator @map serves to map new names for the table fields and the @@map serves to rename the table itself, it's not mandatory for making the code works but it's good practice.

// After the database is created, run the npx prisma studio to check the client with the database and you can manually update, create and delete data. You can preferably use the beekeeper for this since the prisma studio is more limited(can't run queries), but usually for manual runs and checkings the studio should suffice.

// It's a good ideia now to divide three terminals, one for use in single actions, one for nest to run the start dev and one to run the prisma studio.

// In the terminal run npx prisma generate to check if the prisma was created correctly without errors

// Now run the npx nest generate module prisma, this will update the app.module by updating it's import and it will create the prisma folder in src and create the prisma.module.ts

// Now you can run the npx nest generate service prisma, this will add the service and service.spec in the prisma folder. if you run the npx nest generate service prisma --no-spec it will create only the service without the spec witch is used only for tests, so it's quite alright to be without.

// All prisma.service and prima.module is the same as it is only in charge of connecting the schema from the database to the src in the program.
prisma.service:
import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }

  async enableShutdownHooks(app: INestApplication) {
    this.$on('beforeExit', async () => {
      await app.close();
    });
  }
}

prisma.module:
import { Module } from '@nestjs/common';
import { PrismaService } from './prisma.service';

@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
export class PrismaModule {}


// in the table.module, add the imports:[PrismaModule]

// in the table.service, add the constructor(private readonly prisma: PrismaService) {} right after the opening of the class, now update the this reference in the service

// use the prisma methods to do a findAll with the prisma method of many and a create with the prisma method of create.

// remember to turn the service and controller methods into promises, given that now that they connect to exterior data they are all promises. To infer the promise you can write it manually or just select the method and press Ctrl + . it will show the options, infer to the entity.

// Add now the findID in service and use it to create the findById in the controller. The @Param(imported from common) must be included to define the id as parameter of search.

// using the api operation from swagger is optional but good practice to describe what the method is trying to do, put them on each of the actions.

// create the update dto for the user

// install the mapped-types with the npm i @nestjs/mapped-types, it serves to update partially a value with the update dto, while using it, all variables used in the classes are optional.

// creating another method for a function or object that exists in another file, it can be done selecting the method and using (Ctrl + .)

// now is the time where in the service you will start using the this.prisma.dto.* method, remember if you are in doubt of what the method does or require, us the (ctrl + click) to discover follow it until you fin de dtoargs.

// since you are working with probable variables you must let the variables be optional, so use the Partial<> to turn every variable within into optional values.

// Don't forget, when using @Param don't use the : here you are using the variable itself in a method, when you use the : it's for routes as in get, post, delete, update, patch, etc.

// now similiar to how you made the find, you can create the delete, remember that when using the prisma, you can use check the method to see the args, the delete method also exists inside the prisma, so just use it and that will be that. Remember that since you are deleting an item, you don't need to return anything so in the controller, you don't have to use return.
// To reiterate, given that you are a donkey and got this wrong, you don't return anything so remember, no need for promises either, also, this is an async function, so in the service when you create the delete, use the async and await to realize the method.
// You know what, for practicality terms, remember that for every type promise, you should try and use the async await, always, if the service is a straight return turn it into a const such as const a = await ... and then return the a. Little tip here, if you select the whole supposed value that is suposed to return and type (Ctrl + .) and then select extract to constant, you will create a constant that receives this value.

// with this knowlgedge that you should already have had about async and await, it's time to implement the error responses, after the const that receives the await of each function, add an if to detect the const and if it's a false wich it will be if the const fails to receive a value, then use the throw new NotFoundException('Message'). You will need to use this in every service method that searches for specific values, so it returns the error if not found.

// To create a new resource, use the nest g resource (name of resource) --no-spec, with this you will create a crud template of the resource, it could be users, products, table, etc.
// Remember that in the new resource you will have to update the swagger tags, imports, dto and entities that are not naturally imported. (import PrismaModule in the resource.module, define the resource.entity, the create-resource.dto)
// After updating the controller with the swagger and the service, you may note that the prisma may not have the variable of resource that you included before, in order for it to be included you must run npx prisma generate and after this you must reload the vscode with (ctrl + shift + p) type reload and select Reload Window.
// Now define the dto's and entity of the new resource
// Must also update the create-(new resource).dto.ts and include in the imports of the new resource module

// PAY ATTENTION OR THIS WILL BE THE BANE OF YOUR EXISTANCE:
// to apply the hash(this means the encrypting of something) in the password you may decide to use the bcrypt library
// to add this library this is the proper (and fucking only) way to install it(if you fail, to fix it you will end up downloading almost all the fucking types of this library, motherfucker, sorry for the language but i had a bug involving this that delayed me for fucking days, motherfucking days fuck,).
// First: install using npm i bcrypt This will install the bcrypt
// Second: install using npm i -D @types/bcrypt This will install it's types
// Third: import it into the service using import * as bcrypt from 'bcrypt';
// OBS: NO FUCKING MISTERY RIGHT? YOU FUCKING DONKEY AND YOU SPENT DAYS ON THAT SHIT, SHAME ON YOU, SHAME, PURE SHAME

// Another way in wich the bcrypt saves the day,  you can use it to verify if the password is correct by making a comparison and the application of the data return, to see how, observe the code in used in the user.service, a good read will be eye opening. (specially the coments).