// Installing the NestJS
npm i -g @nestjs/cli

// Starting a new project
nest new (nestjs-intr) -> name of the project

// Use of the usual npm run, in the package.json you can see the start options, while working use nest start:dev to watch for changes in files

//in the controller you controll the routes access just insert in the @controller or @get

//in the service you provide the data or functions into the project

// first thing to do is create the .editorconfig  and fill it like so:
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true // optional because frankly this one can get on your nerves while coding since it inserts the final newline everytime you stop using the keyboard and sometimes you don't need to.

// change the listen port in the main to another besides 3000 so it doesn't start a conflict with other ports since most use 3000 already

// when changing a function from a module, change using F2, using it this way changes it's name from all modules so there is no conflict.

// first thing to create is the back end data, start by creating the folder and the file in the src folder (in this case is the table)

// Pay very close attention to this table, and how it's created, notice the usability, the ease and the direction in witch the data flows, much better than before, use it read the coments and understand all of it, in doubt ask your brother or freaking google, for fucks sake study more, sacrifice a saturday more often you lazy bum.

// after the creation of the module, controller and service for the table, create another folder inside called dto(Data Transfer Object) witch is a simple object used to transfer data from one place into another

// Now it's time to create a folder inside the src called entities, an entity is a representation of a conjunction of informations about a determined concept of the system. All entities have atributes, witch are the informations that reference the entity.